// source: netmap/types.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var refs_types_pb = require('../refs/types_pb.js');
goog.object.extend(proto, refs_types_pb);
goog.exportSymbol('proto.neo.fs.v2.netmap.Clause', null, global);
goog.exportSymbol('proto.neo.fs.v2.netmap.Filter', null, global);
goog.exportSymbol('proto.neo.fs.v2.netmap.NetworkConfig', null, global);
goog.exportSymbol('proto.neo.fs.v2.netmap.NetworkConfig.Parameter', null, global);
goog.exportSymbol('proto.neo.fs.v2.netmap.NetworkInfo', null, global);
goog.exportSymbol('proto.neo.fs.v2.netmap.NodeInfo', null, global);
goog.exportSymbol('proto.neo.fs.v2.netmap.NodeInfo.Attribute', null, global);
goog.exportSymbol('proto.neo.fs.v2.netmap.NodeInfo.State', null, global);
goog.exportSymbol('proto.neo.fs.v2.netmap.Operation', null, global);
goog.exportSymbol('proto.neo.fs.v2.netmap.PlacementPolicy', null, global);
goog.exportSymbol('proto.neo.fs.v2.netmap.Replica', null, global);
goog.exportSymbol('proto.neo.fs.v2.netmap.Selector', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.neo.fs.v2.netmap.Filter = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.neo.fs.v2.netmap.Filter.repeatedFields_, null);
};
goog.inherits(proto.neo.fs.v2.netmap.Filter, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.neo.fs.v2.netmap.Filter.displayName = 'proto.neo.fs.v2.netmap.Filter';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.neo.fs.v2.netmap.Selector = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.neo.fs.v2.netmap.Selector, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.neo.fs.v2.netmap.Selector.displayName = 'proto.neo.fs.v2.netmap.Selector';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.neo.fs.v2.netmap.Replica = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.neo.fs.v2.netmap.Replica, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.neo.fs.v2.netmap.Replica.displayName = 'proto.neo.fs.v2.netmap.Replica';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.neo.fs.v2.netmap.PlacementPolicy = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.neo.fs.v2.netmap.PlacementPolicy.repeatedFields_, null);
};
goog.inherits(proto.neo.fs.v2.netmap.PlacementPolicy, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.neo.fs.v2.netmap.PlacementPolicy.displayName = 'proto.neo.fs.v2.netmap.PlacementPolicy';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.neo.fs.v2.netmap.NodeInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.neo.fs.v2.netmap.NodeInfo.repeatedFields_, null);
};
goog.inherits(proto.neo.fs.v2.netmap.NodeInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.neo.fs.v2.netmap.NodeInfo.displayName = 'proto.neo.fs.v2.netmap.NodeInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.neo.fs.v2.netmap.NodeInfo.Attribute = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.neo.fs.v2.netmap.NodeInfo.Attribute.repeatedFields_, null);
};
goog.inherits(proto.neo.fs.v2.netmap.NodeInfo.Attribute, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.neo.fs.v2.netmap.NodeInfo.Attribute.displayName = 'proto.neo.fs.v2.netmap.NodeInfo.Attribute';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.neo.fs.v2.netmap.NetworkConfig = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.neo.fs.v2.netmap.NetworkConfig.repeatedFields_, null);
};
goog.inherits(proto.neo.fs.v2.netmap.NetworkConfig, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.neo.fs.v2.netmap.NetworkConfig.displayName = 'proto.neo.fs.v2.netmap.NetworkConfig';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.neo.fs.v2.netmap.NetworkConfig.Parameter = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.neo.fs.v2.netmap.NetworkConfig.Parameter, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.neo.fs.v2.netmap.NetworkConfig.Parameter.displayName = 'proto.neo.fs.v2.netmap.NetworkConfig.Parameter';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.neo.fs.v2.netmap.NetworkInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.neo.fs.v2.netmap.NetworkInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.neo.fs.v2.netmap.NetworkInfo.displayName = 'proto.neo.fs.v2.netmap.NetworkInfo';
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.neo.fs.v2.netmap.Filter.repeatedFields_ = [5];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.neo.fs.v2.netmap.Filter.prototype.toObject = function(opt_includeInstance) {
  return proto.neo.fs.v2.netmap.Filter.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.neo.fs.v2.netmap.Filter} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.neo.fs.v2.netmap.Filter.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    key: jspb.Message.getFieldWithDefault(msg, 2, ""),
    op: jspb.Message.getFieldWithDefault(msg, 3, 0),
    value: jspb.Message.getFieldWithDefault(msg, 4, ""),
    filtersList: jspb.Message.toObjectList(msg.getFiltersList(),
    proto.neo.fs.v2.netmap.Filter.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.neo.fs.v2.netmap.Filter}
 */
proto.neo.fs.v2.netmap.Filter.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.neo.fs.v2.netmap.Filter;
  return proto.neo.fs.v2.netmap.Filter.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.neo.fs.v2.netmap.Filter} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.neo.fs.v2.netmap.Filter}
 */
proto.neo.fs.v2.netmap.Filter.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setKey(value);
      break;
    case 3:
      var value = /** @type {!proto.neo.fs.v2.netmap.Operation} */ (reader.readEnum());
      msg.setOp(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setValue(value);
      break;
    case 5:
      var value = new proto.neo.fs.v2.netmap.Filter;
      reader.readMessage(value,proto.neo.fs.v2.netmap.Filter.deserializeBinaryFromReader);
      msg.addFilters(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.neo.fs.v2.netmap.Filter.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.neo.fs.v2.netmap.Filter.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.neo.fs.v2.netmap.Filter} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.neo.fs.v2.netmap.Filter.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getKey();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getOp();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
  f = message.getValue();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getFiltersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      5,
      f,
      proto.neo.fs.v2.netmap.Filter.serializeBinaryToWriter
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.neo.fs.v2.netmap.Filter.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.neo.fs.v2.netmap.Filter} returns this
 */
proto.neo.fs.v2.netmap.Filter.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string key = 2;
 * @return {string}
 */
proto.neo.fs.v2.netmap.Filter.prototype.getKey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.neo.fs.v2.netmap.Filter} returns this
 */
proto.neo.fs.v2.netmap.Filter.prototype.setKey = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional Operation op = 3;
 * @return {!proto.neo.fs.v2.netmap.Operation}
 */
proto.neo.fs.v2.netmap.Filter.prototype.getOp = function() {
  return /** @type {!proto.neo.fs.v2.netmap.Operation} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {!proto.neo.fs.v2.netmap.Operation} value
 * @return {!proto.neo.fs.v2.netmap.Filter} returns this
 */
proto.neo.fs.v2.netmap.Filter.prototype.setOp = function(value) {
  return jspb.Message.setProto3EnumField(this, 3, value);
};


/**
 * optional string value = 4;
 * @return {string}
 */
proto.neo.fs.v2.netmap.Filter.prototype.getValue = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.neo.fs.v2.netmap.Filter} returns this
 */
proto.neo.fs.v2.netmap.Filter.prototype.setValue = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * repeated Filter filters = 5;
 * @return {!Array<!proto.neo.fs.v2.netmap.Filter>}
 */
proto.neo.fs.v2.netmap.Filter.prototype.getFiltersList = function() {
  return /** @type{!Array<!proto.neo.fs.v2.netmap.Filter>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.neo.fs.v2.netmap.Filter, 5));
};


/**
 * @param {!Array<!proto.neo.fs.v2.netmap.Filter>} value
 * @return {!proto.neo.fs.v2.netmap.Filter} returns this
*/
proto.neo.fs.v2.netmap.Filter.prototype.setFiltersList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 5, value);
};


/**
 * @param {!proto.neo.fs.v2.netmap.Filter=} opt_value
 * @param {number=} opt_index
 * @return {!proto.neo.fs.v2.netmap.Filter}
 */
proto.neo.fs.v2.netmap.Filter.prototype.addFilters = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 5, opt_value, proto.neo.fs.v2.netmap.Filter, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.neo.fs.v2.netmap.Filter} returns this
 */
proto.neo.fs.v2.netmap.Filter.prototype.clearFiltersList = function() {
  return this.setFiltersList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.neo.fs.v2.netmap.Selector.prototype.toObject = function(opt_includeInstance) {
  return proto.neo.fs.v2.netmap.Selector.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.neo.fs.v2.netmap.Selector} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.neo.fs.v2.netmap.Selector.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    count: jspb.Message.getFieldWithDefault(msg, 2, 0),
    clause: jspb.Message.getFieldWithDefault(msg, 3, 0),
    attribute: jspb.Message.getFieldWithDefault(msg, 4, ""),
    filter: jspb.Message.getFieldWithDefault(msg, 5, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.neo.fs.v2.netmap.Selector}
 */
proto.neo.fs.v2.netmap.Selector.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.neo.fs.v2.netmap.Selector;
  return proto.neo.fs.v2.netmap.Selector.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.neo.fs.v2.netmap.Selector} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.neo.fs.v2.netmap.Selector}
 */
proto.neo.fs.v2.netmap.Selector.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCount(value);
      break;
    case 3:
      var value = /** @type {!proto.neo.fs.v2.netmap.Clause} */ (reader.readEnum());
      msg.setClause(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setAttribute(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setFilter(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.neo.fs.v2.netmap.Selector.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.neo.fs.v2.netmap.Selector.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.neo.fs.v2.netmap.Selector} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.neo.fs.v2.netmap.Selector.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getCount();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getClause();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
  f = message.getAttribute();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getFilter();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.neo.fs.v2.netmap.Selector.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.neo.fs.v2.netmap.Selector} returns this
 */
proto.neo.fs.v2.netmap.Selector.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional uint32 count = 2;
 * @return {number}
 */
proto.neo.fs.v2.netmap.Selector.prototype.getCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.neo.fs.v2.netmap.Selector} returns this
 */
proto.neo.fs.v2.netmap.Selector.prototype.setCount = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional Clause clause = 3;
 * @return {!proto.neo.fs.v2.netmap.Clause}
 */
proto.neo.fs.v2.netmap.Selector.prototype.getClause = function() {
  return /** @type {!proto.neo.fs.v2.netmap.Clause} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {!proto.neo.fs.v2.netmap.Clause} value
 * @return {!proto.neo.fs.v2.netmap.Selector} returns this
 */
proto.neo.fs.v2.netmap.Selector.prototype.setClause = function(value) {
  return jspb.Message.setProto3EnumField(this, 3, value);
};


/**
 * optional string attribute = 4;
 * @return {string}
 */
proto.neo.fs.v2.netmap.Selector.prototype.getAttribute = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.neo.fs.v2.netmap.Selector} returns this
 */
proto.neo.fs.v2.netmap.Selector.prototype.setAttribute = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string filter = 5;
 * @return {string}
 */
proto.neo.fs.v2.netmap.Selector.prototype.getFilter = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.neo.fs.v2.netmap.Selector} returns this
 */
proto.neo.fs.v2.netmap.Selector.prototype.setFilter = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.neo.fs.v2.netmap.Replica.prototype.toObject = function(opt_includeInstance) {
  return proto.neo.fs.v2.netmap.Replica.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.neo.fs.v2.netmap.Replica} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.neo.fs.v2.netmap.Replica.toObject = function(includeInstance, msg) {
  var f, obj = {
    count: jspb.Message.getFieldWithDefault(msg, 1, 0),
    selector: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.neo.fs.v2.netmap.Replica}
 */
proto.neo.fs.v2.netmap.Replica.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.neo.fs.v2.netmap.Replica;
  return proto.neo.fs.v2.netmap.Replica.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.neo.fs.v2.netmap.Replica} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.neo.fs.v2.netmap.Replica}
 */
proto.neo.fs.v2.netmap.Replica.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCount(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setSelector(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.neo.fs.v2.netmap.Replica.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.neo.fs.v2.netmap.Replica.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.neo.fs.v2.netmap.Replica} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.neo.fs.v2.netmap.Replica.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCount();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getSelector();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional uint32 count = 1;
 * @return {number}
 */
proto.neo.fs.v2.netmap.Replica.prototype.getCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.neo.fs.v2.netmap.Replica} returns this
 */
proto.neo.fs.v2.netmap.Replica.prototype.setCount = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string selector = 2;
 * @return {string}
 */
proto.neo.fs.v2.netmap.Replica.prototype.getSelector = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.neo.fs.v2.netmap.Replica} returns this
 */
proto.neo.fs.v2.netmap.Replica.prototype.setSelector = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.neo.fs.v2.netmap.PlacementPolicy.repeatedFields_ = [1,3,4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.neo.fs.v2.netmap.PlacementPolicy.prototype.toObject = function(opt_includeInstance) {
  return proto.neo.fs.v2.netmap.PlacementPolicy.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.neo.fs.v2.netmap.PlacementPolicy} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.neo.fs.v2.netmap.PlacementPolicy.toObject = function(includeInstance, msg) {
  var f, obj = {
    replicasList: jspb.Message.toObjectList(msg.getReplicasList(),
    proto.neo.fs.v2.netmap.Replica.toObject, includeInstance),
    containerBackupFactor: jspb.Message.getFieldWithDefault(msg, 2, 0),
    selectorsList: jspb.Message.toObjectList(msg.getSelectorsList(),
    proto.neo.fs.v2.netmap.Selector.toObject, includeInstance),
    filtersList: jspb.Message.toObjectList(msg.getFiltersList(),
    proto.neo.fs.v2.netmap.Filter.toObject, includeInstance),
    subnetId: (f = msg.getSubnetId()) && refs_types_pb.SubnetID.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.neo.fs.v2.netmap.PlacementPolicy}
 */
proto.neo.fs.v2.netmap.PlacementPolicy.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.neo.fs.v2.netmap.PlacementPolicy;
  return proto.neo.fs.v2.netmap.PlacementPolicy.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.neo.fs.v2.netmap.PlacementPolicy} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.neo.fs.v2.netmap.PlacementPolicy}
 */
proto.neo.fs.v2.netmap.PlacementPolicy.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.neo.fs.v2.netmap.Replica;
      reader.readMessage(value,proto.neo.fs.v2.netmap.Replica.deserializeBinaryFromReader);
      msg.addReplicas(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setContainerBackupFactor(value);
      break;
    case 3:
      var value = new proto.neo.fs.v2.netmap.Selector;
      reader.readMessage(value,proto.neo.fs.v2.netmap.Selector.deserializeBinaryFromReader);
      msg.addSelectors(value);
      break;
    case 4:
      var value = new proto.neo.fs.v2.netmap.Filter;
      reader.readMessage(value,proto.neo.fs.v2.netmap.Filter.deserializeBinaryFromReader);
      msg.addFilters(value);
      break;
    case 5:
      var value = new refs_types_pb.SubnetID;
      reader.readMessage(value,refs_types_pb.SubnetID.deserializeBinaryFromReader);
      msg.setSubnetId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.neo.fs.v2.netmap.PlacementPolicy.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.neo.fs.v2.netmap.PlacementPolicy.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.neo.fs.v2.netmap.PlacementPolicy} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.neo.fs.v2.netmap.PlacementPolicy.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getReplicasList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.neo.fs.v2.netmap.Replica.serializeBinaryToWriter
    );
  }
  f = message.getContainerBackupFactor();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getSelectorsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.neo.fs.v2.netmap.Selector.serializeBinaryToWriter
    );
  }
  f = message.getFiltersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.neo.fs.v2.netmap.Filter.serializeBinaryToWriter
    );
  }
  f = message.getSubnetId();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      refs_types_pb.SubnetID.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Replica replicas = 1;
 * @return {!Array<!proto.neo.fs.v2.netmap.Replica>}
 */
proto.neo.fs.v2.netmap.PlacementPolicy.prototype.getReplicasList = function() {
  return /** @type{!Array<!proto.neo.fs.v2.netmap.Replica>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.neo.fs.v2.netmap.Replica, 1));
};


/**
 * @param {!Array<!proto.neo.fs.v2.netmap.Replica>} value
 * @return {!proto.neo.fs.v2.netmap.PlacementPolicy} returns this
*/
proto.neo.fs.v2.netmap.PlacementPolicy.prototype.setReplicasList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.neo.fs.v2.netmap.Replica=} opt_value
 * @param {number=} opt_index
 * @return {!proto.neo.fs.v2.netmap.Replica}
 */
proto.neo.fs.v2.netmap.PlacementPolicy.prototype.addReplicas = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.neo.fs.v2.netmap.Replica, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.neo.fs.v2.netmap.PlacementPolicy} returns this
 */
proto.neo.fs.v2.netmap.PlacementPolicy.prototype.clearReplicasList = function() {
  return this.setReplicasList([]);
};


/**
 * optional uint32 container_backup_factor = 2;
 * @return {number}
 */
proto.neo.fs.v2.netmap.PlacementPolicy.prototype.getContainerBackupFactor = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.neo.fs.v2.netmap.PlacementPolicy} returns this
 */
proto.neo.fs.v2.netmap.PlacementPolicy.prototype.setContainerBackupFactor = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * repeated Selector selectors = 3;
 * @return {!Array<!proto.neo.fs.v2.netmap.Selector>}
 */
proto.neo.fs.v2.netmap.PlacementPolicy.prototype.getSelectorsList = function() {
  return /** @type{!Array<!proto.neo.fs.v2.netmap.Selector>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.neo.fs.v2.netmap.Selector, 3));
};


/**
 * @param {!Array<!proto.neo.fs.v2.netmap.Selector>} value
 * @return {!proto.neo.fs.v2.netmap.PlacementPolicy} returns this
*/
proto.neo.fs.v2.netmap.PlacementPolicy.prototype.setSelectorsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.neo.fs.v2.netmap.Selector=} opt_value
 * @param {number=} opt_index
 * @return {!proto.neo.fs.v2.netmap.Selector}
 */
proto.neo.fs.v2.netmap.PlacementPolicy.prototype.addSelectors = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.neo.fs.v2.netmap.Selector, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.neo.fs.v2.netmap.PlacementPolicy} returns this
 */
proto.neo.fs.v2.netmap.PlacementPolicy.prototype.clearSelectorsList = function() {
  return this.setSelectorsList([]);
};


/**
 * repeated Filter filters = 4;
 * @return {!Array<!proto.neo.fs.v2.netmap.Filter>}
 */
proto.neo.fs.v2.netmap.PlacementPolicy.prototype.getFiltersList = function() {
  return /** @type{!Array<!proto.neo.fs.v2.netmap.Filter>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.neo.fs.v2.netmap.Filter, 4));
};


/**
 * @param {!Array<!proto.neo.fs.v2.netmap.Filter>} value
 * @return {!proto.neo.fs.v2.netmap.PlacementPolicy} returns this
*/
proto.neo.fs.v2.netmap.PlacementPolicy.prototype.setFiltersList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.neo.fs.v2.netmap.Filter=} opt_value
 * @param {number=} opt_index
 * @return {!proto.neo.fs.v2.netmap.Filter}
 */
proto.neo.fs.v2.netmap.PlacementPolicy.prototype.addFilters = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.neo.fs.v2.netmap.Filter, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.neo.fs.v2.netmap.PlacementPolicy} returns this
 */
proto.neo.fs.v2.netmap.PlacementPolicy.prototype.clearFiltersList = function() {
  return this.setFiltersList([]);
};


/**
 * optional neo.fs.v2.refs.SubnetID subnet_id = 5;
 * @return {?proto.neo.fs.v2.refs.SubnetID}
 */
proto.neo.fs.v2.netmap.PlacementPolicy.prototype.getSubnetId = function() {
  return /** @type{?proto.neo.fs.v2.refs.SubnetID} */ (
    jspb.Message.getWrapperField(this, refs_types_pb.SubnetID, 5));
};


/**
 * @param {?proto.neo.fs.v2.refs.SubnetID|undefined} value
 * @return {!proto.neo.fs.v2.netmap.PlacementPolicy} returns this
*/
proto.neo.fs.v2.netmap.PlacementPolicy.prototype.setSubnetId = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.neo.fs.v2.netmap.PlacementPolicy} returns this
 */
proto.neo.fs.v2.netmap.PlacementPolicy.prototype.clearSubnetId = function() {
  return this.setSubnetId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.neo.fs.v2.netmap.PlacementPolicy.prototype.hasSubnetId = function() {
  return jspb.Message.getField(this, 5) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.neo.fs.v2.netmap.NodeInfo.repeatedFields_ = [2,3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.neo.fs.v2.netmap.NodeInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.neo.fs.v2.netmap.NodeInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.neo.fs.v2.netmap.NodeInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.neo.fs.v2.netmap.NodeInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    publicKey: msg.getPublicKey_asB64(),
    addressesList: (f = jspb.Message.getRepeatedField(msg, 2)) == null ? undefined : f,
    attributesList: jspb.Message.toObjectList(msg.getAttributesList(),
    proto.neo.fs.v2.netmap.NodeInfo.Attribute.toObject, includeInstance),
    state: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.neo.fs.v2.netmap.NodeInfo}
 */
proto.neo.fs.v2.netmap.NodeInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.neo.fs.v2.netmap.NodeInfo;
  return proto.neo.fs.v2.netmap.NodeInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.neo.fs.v2.netmap.NodeInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.neo.fs.v2.netmap.NodeInfo}
 */
proto.neo.fs.v2.netmap.NodeInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setPublicKey(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.addAddresses(value);
      break;
    case 3:
      var value = new proto.neo.fs.v2.netmap.NodeInfo.Attribute;
      reader.readMessage(value,proto.neo.fs.v2.netmap.NodeInfo.Attribute.deserializeBinaryFromReader);
      msg.addAttributes(value);
      break;
    case 4:
      var value = /** @type {!proto.neo.fs.v2.netmap.NodeInfo.State} */ (reader.readEnum());
      msg.setState(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.neo.fs.v2.netmap.NodeInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.neo.fs.v2.netmap.NodeInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.neo.fs.v2.netmap.NodeInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.neo.fs.v2.netmap.NodeInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPublicKey_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getAddressesList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      2,
      f
    );
  }
  f = message.getAttributesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.neo.fs.v2.netmap.NodeInfo.Attribute.serializeBinaryToWriter
    );
  }
  f = message.getState();
  if (f !== 0.0) {
    writer.writeEnum(
      4,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.neo.fs.v2.netmap.NodeInfo.State = {
  UNSPECIFIED: 0,
  ONLINE: 1,
  OFFLINE: 2
};


/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.neo.fs.v2.netmap.NodeInfo.Attribute.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.neo.fs.v2.netmap.NodeInfo.Attribute.prototype.toObject = function(opt_includeInstance) {
  return proto.neo.fs.v2.netmap.NodeInfo.Attribute.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.neo.fs.v2.netmap.NodeInfo.Attribute} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.neo.fs.v2.netmap.NodeInfo.Attribute.toObject = function(includeInstance, msg) {
  var f, obj = {
    key: jspb.Message.getFieldWithDefault(msg, 1, ""),
    value: jspb.Message.getFieldWithDefault(msg, 2, ""),
    parentsList: (f = jspb.Message.getRepeatedField(msg, 3)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.neo.fs.v2.netmap.NodeInfo.Attribute}
 */
proto.neo.fs.v2.netmap.NodeInfo.Attribute.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.neo.fs.v2.netmap.NodeInfo.Attribute;
  return proto.neo.fs.v2.netmap.NodeInfo.Attribute.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.neo.fs.v2.netmap.NodeInfo.Attribute} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.neo.fs.v2.netmap.NodeInfo.Attribute}
 */
proto.neo.fs.v2.netmap.NodeInfo.Attribute.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setKey(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setValue(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.addParents(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.neo.fs.v2.netmap.NodeInfo.Attribute.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.neo.fs.v2.netmap.NodeInfo.Attribute.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.neo.fs.v2.netmap.NodeInfo.Attribute} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.neo.fs.v2.netmap.NodeInfo.Attribute.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getKey();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getValue();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getParentsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      3,
      f
    );
  }
};


/**
 * optional string key = 1;
 * @return {string}
 */
proto.neo.fs.v2.netmap.NodeInfo.Attribute.prototype.getKey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.neo.fs.v2.netmap.NodeInfo.Attribute} returns this
 */
proto.neo.fs.v2.netmap.NodeInfo.Attribute.prototype.setKey = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string value = 2;
 * @return {string}
 */
proto.neo.fs.v2.netmap.NodeInfo.Attribute.prototype.getValue = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.neo.fs.v2.netmap.NodeInfo.Attribute} returns this
 */
proto.neo.fs.v2.netmap.NodeInfo.Attribute.prototype.setValue = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * repeated string parents = 3;
 * @return {!Array<string>}
 */
proto.neo.fs.v2.netmap.NodeInfo.Attribute.prototype.getParentsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 3));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.neo.fs.v2.netmap.NodeInfo.Attribute} returns this
 */
proto.neo.fs.v2.netmap.NodeInfo.Attribute.prototype.setParentsList = function(value) {
  return jspb.Message.setField(this, 3, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.neo.fs.v2.netmap.NodeInfo.Attribute} returns this
 */
proto.neo.fs.v2.netmap.NodeInfo.Attribute.prototype.addParents = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.neo.fs.v2.netmap.NodeInfo.Attribute} returns this
 */
proto.neo.fs.v2.netmap.NodeInfo.Attribute.prototype.clearParentsList = function() {
  return this.setParentsList([]);
};


/**
 * optional bytes public_key = 1;
 * @return {!(string|Uint8Array)}
 */
proto.neo.fs.v2.netmap.NodeInfo.prototype.getPublicKey = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes public_key = 1;
 * This is a type-conversion wrapper around `getPublicKey()`
 * @return {string}
 */
proto.neo.fs.v2.netmap.NodeInfo.prototype.getPublicKey_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getPublicKey()));
};


/**
 * optional bytes public_key = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getPublicKey()`
 * @return {!Uint8Array}
 */
proto.neo.fs.v2.netmap.NodeInfo.prototype.getPublicKey_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getPublicKey()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.neo.fs.v2.netmap.NodeInfo} returns this
 */
proto.neo.fs.v2.netmap.NodeInfo.prototype.setPublicKey = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * repeated string addresses = 2;
 * @return {!Array<string>}
 */
proto.neo.fs.v2.netmap.NodeInfo.prototype.getAddressesList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 2));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.neo.fs.v2.netmap.NodeInfo} returns this
 */
proto.neo.fs.v2.netmap.NodeInfo.prototype.setAddressesList = function(value) {
  return jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.neo.fs.v2.netmap.NodeInfo} returns this
 */
proto.neo.fs.v2.netmap.NodeInfo.prototype.addAddresses = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.neo.fs.v2.netmap.NodeInfo} returns this
 */
proto.neo.fs.v2.netmap.NodeInfo.prototype.clearAddressesList = function() {
  return this.setAddressesList([]);
};


/**
 * repeated Attribute attributes = 3;
 * @return {!Array<!proto.neo.fs.v2.netmap.NodeInfo.Attribute>}
 */
proto.neo.fs.v2.netmap.NodeInfo.prototype.getAttributesList = function() {
  return /** @type{!Array<!proto.neo.fs.v2.netmap.NodeInfo.Attribute>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.neo.fs.v2.netmap.NodeInfo.Attribute, 3));
};


/**
 * @param {!Array<!proto.neo.fs.v2.netmap.NodeInfo.Attribute>} value
 * @return {!proto.neo.fs.v2.netmap.NodeInfo} returns this
*/
proto.neo.fs.v2.netmap.NodeInfo.prototype.setAttributesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.neo.fs.v2.netmap.NodeInfo.Attribute=} opt_value
 * @param {number=} opt_index
 * @return {!proto.neo.fs.v2.netmap.NodeInfo.Attribute}
 */
proto.neo.fs.v2.netmap.NodeInfo.prototype.addAttributes = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.neo.fs.v2.netmap.NodeInfo.Attribute, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.neo.fs.v2.netmap.NodeInfo} returns this
 */
proto.neo.fs.v2.netmap.NodeInfo.prototype.clearAttributesList = function() {
  return this.setAttributesList([]);
};


/**
 * optional State state = 4;
 * @return {!proto.neo.fs.v2.netmap.NodeInfo.State}
 */
proto.neo.fs.v2.netmap.NodeInfo.prototype.getState = function() {
  return /** @type {!proto.neo.fs.v2.netmap.NodeInfo.State} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {!proto.neo.fs.v2.netmap.NodeInfo.State} value
 * @return {!proto.neo.fs.v2.netmap.NodeInfo} returns this
 */
proto.neo.fs.v2.netmap.NodeInfo.prototype.setState = function(value) {
  return jspb.Message.setProto3EnumField(this, 4, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.neo.fs.v2.netmap.NetworkConfig.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.neo.fs.v2.netmap.NetworkConfig.prototype.toObject = function(opt_includeInstance) {
  return proto.neo.fs.v2.netmap.NetworkConfig.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.neo.fs.v2.netmap.NetworkConfig} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.neo.fs.v2.netmap.NetworkConfig.toObject = function(includeInstance, msg) {
  var f, obj = {
    parametersList: jspb.Message.toObjectList(msg.getParametersList(),
    proto.neo.fs.v2.netmap.NetworkConfig.Parameter.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.neo.fs.v2.netmap.NetworkConfig}
 */
proto.neo.fs.v2.netmap.NetworkConfig.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.neo.fs.v2.netmap.NetworkConfig;
  return proto.neo.fs.v2.netmap.NetworkConfig.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.neo.fs.v2.netmap.NetworkConfig} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.neo.fs.v2.netmap.NetworkConfig}
 */
proto.neo.fs.v2.netmap.NetworkConfig.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.neo.fs.v2.netmap.NetworkConfig.Parameter;
      reader.readMessage(value,proto.neo.fs.v2.netmap.NetworkConfig.Parameter.deserializeBinaryFromReader);
      msg.addParameters(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.neo.fs.v2.netmap.NetworkConfig.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.neo.fs.v2.netmap.NetworkConfig.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.neo.fs.v2.netmap.NetworkConfig} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.neo.fs.v2.netmap.NetworkConfig.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getParametersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.neo.fs.v2.netmap.NetworkConfig.Parameter.serializeBinaryToWriter
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.neo.fs.v2.netmap.NetworkConfig.Parameter.prototype.toObject = function(opt_includeInstance) {
  return proto.neo.fs.v2.netmap.NetworkConfig.Parameter.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.neo.fs.v2.netmap.NetworkConfig.Parameter} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.neo.fs.v2.netmap.NetworkConfig.Parameter.toObject = function(includeInstance, msg) {
  var f, obj = {
    key: msg.getKey_asB64(),
    value: msg.getValue_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.neo.fs.v2.netmap.NetworkConfig.Parameter}
 */
proto.neo.fs.v2.netmap.NetworkConfig.Parameter.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.neo.fs.v2.netmap.NetworkConfig.Parameter;
  return proto.neo.fs.v2.netmap.NetworkConfig.Parameter.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.neo.fs.v2.netmap.NetworkConfig.Parameter} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.neo.fs.v2.netmap.NetworkConfig.Parameter}
 */
proto.neo.fs.v2.netmap.NetworkConfig.Parameter.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setKey(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setValue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.neo.fs.v2.netmap.NetworkConfig.Parameter.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.neo.fs.v2.netmap.NetworkConfig.Parameter.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.neo.fs.v2.netmap.NetworkConfig.Parameter} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.neo.fs.v2.netmap.NetworkConfig.Parameter.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getKey_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getValue_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
};


/**
 * optional bytes key = 1;
 * @return {!(string|Uint8Array)}
 */
proto.neo.fs.v2.netmap.NetworkConfig.Parameter.prototype.getKey = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes key = 1;
 * This is a type-conversion wrapper around `getKey()`
 * @return {string}
 */
proto.neo.fs.v2.netmap.NetworkConfig.Parameter.prototype.getKey_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getKey()));
};


/**
 * optional bytes key = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getKey()`
 * @return {!Uint8Array}
 */
proto.neo.fs.v2.netmap.NetworkConfig.Parameter.prototype.getKey_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getKey()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.neo.fs.v2.netmap.NetworkConfig.Parameter} returns this
 */
proto.neo.fs.v2.netmap.NetworkConfig.Parameter.prototype.setKey = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional bytes value = 2;
 * @return {!(string|Uint8Array)}
 */
proto.neo.fs.v2.netmap.NetworkConfig.Parameter.prototype.getValue = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes value = 2;
 * This is a type-conversion wrapper around `getValue()`
 * @return {string}
 */
proto.neo.fs.v2.netmap.NetworkConfig.Parameter.prototype.getValue_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getValue()));
};


/**
 * optional bytes value = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getValue()`
 * @return {!Uint8Array}
 */
proto.neo.fs.v2.netmap.NetworkConfig.Parameter.prototype.getValue_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getValue()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.neo.fs.v2.netmap.NetworkConfig.Parameter} returns this
 */
proto.neo.fs.v2.netmap.NetworkConfig.Parameter.prototype.setValue = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * repeated Parameter parameters = 1;
 * @return {!Array<!proto.neo.fs.v2.netmap.NetworkConfig.Parameter>}
 */
proto.neo.fs.v2.netmap.NetworkConfig.prototype.getParametersList = function() {
  return /** @type{!Array<!proto.neo.fs.v2.netmap.NetworkConfig.Parameter>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.neo.fs.v2.netmap.NetworkConfig.Parameter, 1));
};


/**
 * @param {!Array<!proto.neo.fs.v2.netmap.NetworkConfig.Parameter>} value
 * @return {!proto.neo.fs.v2.netmap.NetworkConfig} returns this
*/
proto.neo.fs.v2.netmap.NetworkConfig.prototype.setParametersList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.neo.fs.v2.netmap.NetworkConfig.Parameter=} opt_value
 * @param {number=} opt_index
 * @return {!proto.neo.fs.v2.netmap.NetworkConfig.Parameter}
 */
proto.neo.fs.v2.netmap.NetworkConfig.prototype.addParameters = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.neo.fs.v2.netmap.NetworkConfig.Parameter, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.neo.fs.v2.netmap.NetworkConfig} returns this
 */
proto.neo.fs.v2.netmap.NetworkConfig.prototype.clearParametersList = function() {
  return this.setParametersList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.neo.fs.v2.netmap.NetworkInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.neo.fs.v2.netmap.NetworkInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.neo.fs.v2.netmap.NetworkInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.neo.fs.v2.netmap.NetworkInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    currentEpoch: jspb.Message.getFieldWithDefault(msg, 1, 0),
    magicNumber: jspb.Message.getFieldWithDefault(msg, 2, 0),
    msPerBlock: jspb.Message.getFieldWithDefault(msg, 3, 0),
    networkConfig: (f = msg.getNetworkConfig()) && proto.neo.fs.v2.netmap.NetworkConfig.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.neo.fs.v2.netmap.NetworkInfo}
 */
proto.neo.fs.v2.netmap.NetworkInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.neo.fs.v2.netmap.NetworkInfo;
  return proto.neo.fs.v2.netmap.NetworkInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.neo.fs.v2.netmap.NetworkInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.neo.fs.v2.netmap.NetworkInfo}
 */
proto.neo.fs.v2.netmap.NetworkInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setCurrentEpoch(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setMagicNumber(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setMsPerBlock(value);
      break;
    case 4:
      var value = new proto.neo.fs.v2.netmap.NetworkConfig;
      reader.readMessage(value,proto.neo.fs.v2.netmap.NetworkConfig.deserializeBinaryFromReader);
      msg.setNetworkConfig(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.neo.fs.v2.netmap.NetworkInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.neo.fs.v2.netmap.NetworkInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.neo.fs.v2.netmap.NetworkInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.neo.fs.v2.netmap.NetworkInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCurrentEpoch();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getMagicNumber();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getMsPerBlock();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
  f = message.getNetworkConfig();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.neo.fs.v2.netmap.NetworkConfig.serializeBinaryToWriter
    );
  }
};


/**
 * optional uint64 current_epoch = 1;
 * @return {number}
 */
proto.neo.fs.v2.netmap.NetworkInfo.prototype.getCurrentEpoch = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.neo.fs.v2.netmap.NetworkInfo} returns this
 */
proto.neo.fs.v2.netmap.NetworkInfo.prototype.setCurrentEpoch = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint64 magic_number = 2;
 * @return {number}
 */
proto.neo.fs.v2.netmap.NetworkInfo.prototype.getMagicNumber = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.neo.fs.v2.netmap.NetworkInfo} returns this
 */
proto.neo.fs.v2.netmap.NetworkInfo.prototype.setMagicNumber = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int64 ms_per_block = 3;
 * @return {number}
 */
proto.neo.fs.v2.netmap.NetworkInfo.prototype.getMsPerBlock = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.neo.fs.v2.netmap.NetworkInfo} returns this
 */
proto.neo.fs.v2.netmap.NetworkInfo.prototype.setMsPerBlock = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional NetworkConfig network_config = 4;
 * @return {?proto.neo.fs.v2.netmap.NetworkConfig}
 */
proto.neo.fs.v2.netmap.NetworkInfo.prototype.getNetworkConfig = function() {
  return /** @type{?proto.neo.fs.v2.netmap.NetworkConfig} */ (
    jspb.Message.getWrapperField(this, proto.neo.fs.v2.netmap.NetworkConfig, 4));
};


/**
 * @param {?proto.neo.fs.v2.netmap.NetworkConfig|undefined} value
 * @return {!proto.neo.fs.v2.netmap.NetworkInfo} returns this
*/
proto.neo.fs.v2.netmap.NetworkInfo.prototype.setNetworkConfig = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.neo.fs.v2.netmap.NetworkInfo} returns this
 */
proto.neo.fs.v2.netmap.NetworkInfo.prototype.clearNetworkConfig = function() {
  return this.setNetworkConfig(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.neo.fs.v2.netmap.NetworkInfo.prototype.hasNetworkConfig = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * @enum {number}
 */
proto.neo.fs.v2.netmap.Operation = {
  OPERATION_UNSPECIFIED: 0,
  EQ: 1,
  NE: 2,
  GT: 3,
  GE: 4,
  LT: 5,
  LE: 6,
  OR: 7,
  AND: 8
};

/**
 * @enum {number}
 */
proto.neo.fs.v2.netmap.Clause = {
  CLAUSE_UNSPECIFIED: 0,
  SAME: 1,
  DISTINCT: 2
};

goog.object.extend(exports, proto.neo.fs.v2.netmap);
